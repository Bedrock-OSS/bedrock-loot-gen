{
    "$id": "https://aexer0e.github.io/bedrock-schema/",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/Echo:NPC",
    "definitions": {
        "Echo:NPC": {
            "type": "object",
            "properties": {
                "header": { "$ref": "#/definitions/header" },
                "states": { "$ref": "#/definitions/states" },
                "entity": { "$ref": "#/definitions/entity" }
            }
        },
        "header": {
            "$ref": "#/definitions/settings"
        },
        "states": {
            "type": "array",
            "title": "States",
            "items": { "$ref": "#/definitions/state" }
        },
        "entity": {
            "type": [ "string", "object" ],
            "title": "Entity",
            "description": "Entity definition can either be an entity_template, or an actual entity: (Don't include both, pick one)",
            "if": { "type": "object" },
            "then": { "$ref": "https://aexer0e.github.io/bedrock-schema" }
        },
        "state": {
            "type": "object",
            "title": "State",
            "properties": {
                "name": {
                    "title": "Name",
                    "type": "string",
                    "description": "The name of the state. All states should have a name"
                },
                "next": {
                    "title": "Next",
                    "type": "string",
                    "description": "Determines what state to move to after the sub-states are used up."
                },
                "length": {
                    "title": "Length",
                    "type": "integer",
                    "description": "Determines what state to move to after the sub-states are used up."
                },
                "text": {
                    "title": "Text",
                    "type": "array",
                    "description": "Text is printed in order, one dialogue option, then the next.",
                    "items": { "type": "string" }
                },
                "commands": {
                    "title": "Commands",
                    "type": [ "array", "object" ],
                    "description": "Commands accepts either arrays that contain arrays with batches of commands, or numbery arguments to play arbitrary commands at arbitrary states",
                    "$ref": "#/library/commands_format"
                },
                "events": {
                    "title": "Events",
                    "type": [ "array", "object" ],
                    "description": "events accepts either arrays that contain arrays with batches of events, or numbery arguments to run arbitrary events at arbitrary states",
                    "$ref": "#/library/commands_format"
                },
                "custom_components": {
                    "title": "Custom Components",
                    "type": [ "array", "object" ],
                    "description": "Custom components accepts either arrays that contain arrays with batches of custom components, or numbery arguments to add arbitrary custom components at arbitrary states\nCustom components are pulled from component_templates in settings and custom settings.",
                    "$ref": "#/library/commands_format"
                },
                "transitions": {
                    "title": "Transitions",
                    "type": [ "array", "object" ],
                    "description": "Transitions accepts either arrays that contain arrays with batches of component groups, or numbery arguments to use arbitrary transitions at arbitrary states\nTransitions are pulled from transition_templates in settings and custom settings.",
                    "$ref": "#/library/transitions_format"
                },
                "components": {
                    "title": "Components",
                    "type": "object",
                    "description": "Components can be added into the entity using numbery arguments.",
                    "patternProperties": {
                        "^(([1-9]+)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))-?(([1-9]*)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))$": {
                            "type": "object",
                            "$ref": "https://aexer0e.github.io/bedrock-schema#/definitions/components"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "settings": {
            "type": "object",
            "title": "Header",
            "description": "Template settings",
            "properties": {
                "default_state": {
                    "title": "Defaul State",
                    "type": "string",
                    "description": "Sets default state to add when the entity is spawned. Default state \"none\" means that no state will be added.",
                    "examples": [ "main" ]
                },
                "default_transitions": {
                    "title": "Defaul Transtitions",
                    "type": "array",
                    "description": "Sets default transition types when no transition is specified inside states.",
                    "items": { "$ref": "#/library/transitions" }
                },
                "sound_template": {
                    "title": "Sound Template",
                    "type": "string",
                    "description": "This is the template for the sounds list.\nThe \"SOUND\" part will be replaced by whatever argument",
                    "examples": [ "/playsound SOUND @a ~ ~ ~" ]
                },
                "text_template": {
                    "title": "Text Template",
                    "type": "string",
                    "description": "This is the template for the text list.\nThe \"TEXT\" part will be replaced by whatever argument",
                    "examples": [ "/say TEXT" ]
                },
                "output_type": {
                    "title": "Output Type",
                    "type": "string",
                    "description": "Default output location.",
                    "examples": [ "here", "dev", "world" ],
                    "allOf": [
                        {
                            "if": { "const": "here" },
                            "then": { "description": "Exports into the same folder as Echo was run in" }
                        },
                        {
                            "if": { "items": { "const": "dev" } },
                            "then": { "description": "Searches for the BP in the development_behavior_pack folder, based on Manifest ID" }
                        },
                        {
                            "if": { "items": { "const": "world" } },
                            "then": { "description": "Searches for the BP in the minecraftWorlds folder, based on Manifest ID" }
                        }
                    ]
                },
                "default_state_type": {
                    "title": "Default State Type",
                    "type": "string",
                    "description": "Default state type.",
                    "examples": [ "standard", "single" ]
                },
                "use_translations": {
                    "title": "Use Translations",
                    "type": "boolean",
                    "description": "Future proofing some concepts. Don't touch.",
                    "default": false
                },
                "max_allowed_states": {
                    "title": "Max Allowed States",
                    "type": "integer",
                    "description": "Maximum amount of states before the warning kicks in.",
                    "default": 20
                },
                "entity_templates": {
                    "title": "Entity Templates",
                    "type": "object",
                    "description": "Please read the Echo:NPC Documentation for details.",
                    "patternProperties": {
                        "^.*$": {
                            "title": "Entity",
                            "type": "object",
                            "$ref": "https://aexer0e.github.io/bedrock-schema/"
                        }
                    }
                },
                "component_templates": {
                    "title": "Component Templates",
                    "type": "object",
                    "description": "Please read the Echo:NPC Documentation for details.",
                    "patternProperties": {
                        "^.*$": {
                            "title": "Component",
                            "type": "object",
                            "$ref": "https://aexer0e.github.io/bedrock-schema#/definitions/components"
                        }
                    }
                },
                "transition_templates": {
                    "title": "Transition Templates",
                    "type": "object",
                    "description": "Please read the Echo:NPC Documentation for details.",
                    "patternProperties": {
                        "^.*$": {
                            "title": "Transition",
                            "type": "object",
                            "$ref": "https://aexer0e.github.io/bedrock-schema#/definitions/components"
                        }
                    }
                }
            }
        }
    },
    "library": {
        "transitions": {
            "type": "string",
            "examples": [
                "interact",
                "timer",
                "interact_has_item",
                "proximity",
                "reverse_proximity",
                "has_tag"
            ],
            "allOf": [
                {
                    "if": { "pattern": "^(interact ).*$" },
                    "then": { "description": "This is the “right click” transition. If no transitions are supplied, this transition is used.\n<interact> [event]" }
                },
                {
                    "if": { "pattern": "^(timer).*$" },
                    "then": { "description": "This is a simple timer: It will run after the time runs down.\n<timer> [time in second] [event]" }
                },
                {
                    "if": {  "pattern": "^(interact_has_item).*$" },
                    "then": { "description": "Tests for a right click with a specific item.\n<interact_has_item> <item identifier> [event]" }
                },
                {
                    "if": { "pattern": "^(proximity).*$" } ,
                    "then": { "description": "Tests for when a player is within a set distance.\n<proximity> [ditance in blocks] [event]" }
                },
                {
                    "if": { "pattern": "^(reverse_proximity).*$" },
                    "then": { "description": "Tests for when NO players are within a set distance.\n<reverse_proximity> [distnace in blocks] [event]" }
                },
                {
                    "if": { "pattern": "^(has_tag).*$" },
                    "then": { "description": "Tests for if the entity has a specific tag.\n<has_tag> <tag> [event]" }
                }
            ]
        },
        "commands_format": {
            "if": { "type": "object" },
            "then": {
                "patternProperties": {
                    "^(([1-9]+)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))-?(([1-9]*)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))$": {
                        "type": [ "string", "array" ],
                        "$ref": "#/library/transitions",
                        "if": { "type": "string" },
                        "then": { "$ref": "#/library/transitions" },
                        "else": { "items": { "type": "string", "$ref": "#/library/transitions" } }
                    }
                },
                "additionalProperties": false
            },
            "else": { "items": { "type": "array", "items": { "type": "string" } } }
        },
        "transitions_format": {
            "if": { "type": "object" },
            "then": {
                "patternProperties": {
                    "^(([1-9]+)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))-?(([1-9]*)|((all)|(last)|(end)|(first)|(second)|(third)|(fourth)|(fifth)|(sixth)|(seventh)|(eighth)|(ninth)|(tenth)))$": {
                        "type": [ "string", "array" ],
                        "$ref": "#/library/transitions",
                        "if": { "type": "string" },
                        "then": { "$ref": "#/library/transitions" },
                        "else": { "items": { "type": "string", "$ref": "#/library/transitions" } }
                    }
                },
                "additionalProperties": false
            },
            "else": {
                "if": { "type": "array" },
                "then": { "items": { "type": "string", "$ref": "#/library/transitions" } },
                "else": { "type": "string", "$ref": "#/library/transitions" }
            }
        }
    }
}